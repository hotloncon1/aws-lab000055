[{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/","title":"Cơ cấu lại dữ liệu và quy trình làm việc của bạn","tags":[],"description":"","content":"Cơ cấu lại dữ liệu và quy trình làm việc của bạn Tổng quan Trong bài thực hành này, chúng ta sẽ lặp lại quá trình triển khai TravelBuddy monolithic và chuyển nó sang kiến trúc serverless/serviceful với microservices. Trong những bài thực hành trước, chúng ta đã tìm hiểu về các serverless concepts, ví dụ như AWS Lambda và Amazon API Gateway, nhưng trong bài thực hành này, chúng ta sẽ xem xét lại về nguyên tắc khối (monolith) của chúng ta, chuyển sang mô hình hoàn toàn không máy chủ (serverless model) và kết hợp xác thực và cấp quyền bằng Amazon Cognito.\nBạn sẽ thực hiện nhiều cách tiếp cận khác nhau khi triển khai các Lambda functions tạo nên các microservice, từ triển khai thủ công đến triển khai tự động CI/CD để đảm bảo bạn hiểu rõ về từng phần của kiến trúc và cách đơn giản hóa sự tự động hóa cơ sở hạ tầng và hợp lý hóa việc triển khai.\nNội dung: Giới thiệu Chuẩn bị Tạo Single Page Application Cấu hình Authentication, Authorization và Accounting (AAA) Theo dõi Hiệu năng Ứng dụng với AWS X-Ray Bài tập nâng cao Dọn dẹp tài nguyên "},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/1-introduction/","title":"Giới thiệu","tags":[],"description":"","content":"Giới thiệu Trong bài thực hành này, chúng ta sẽ lặp lại quá trình triển khai TravelBuddy monolithic và chuyển nó sang kiến trúc serverless/serviceful với microservices. Trong những bài thực hành trước, chúng ta đã tìm hiểu về các serverless concepts, ví dụ như AWS Lambda và Amazon API Gateway, nhưng trong bài thực hành này, chúng ta sẽ xem xét lại về nguyên tắc khối (monolith) của chúng ta, chuyển sang mô hình hoàn toàn không máy chủ (serverless model) và kết hợp xác thực và cấp quyền bằng Amazon Cognito.\nBạn sẽ thực hiện nhiều cách tiếp cận khác nhau khi triển khai các Lambda functions tạo nên các microservice, từ triển khai thủ công đến triển khai tự động CI/CD để đảm bảo bạn hiểu rõ về từng phần của kiến trúc và cách đơn giản hóa sự tự động hóa cơ sở hạ tầng và hợp lý hóa việc triển khai.\nTổng quan kiến trúc chúng ta xây dựng như sau:\nAmazon Cognito Amazon Cognito cho phép bạn bổ sung tính năng đăng ký, đăng nhập và kiểm soát truy cập người dùng vào trang web và ứng dụng di động một cách nhanh chóng và dễ dàng. Amazon Cognito có quy mô lên tới hàng triệu người dùng và hỗ trợ đăng nhập thông qua các nhà cung cấp danh tính mạng xã hội như Apple, Facebook, Google và Amazon, cũng như các nhà cung cấp danh tính doanh nghiệp thông qua SAML 2.0 và OpenID Connect.\nClick vào đây để biết thêm thông tin về Amazon Cognito\nAmazon API Gateway Amazon API Gateway là dịch vụ được quản lý hoàn toàn giúp các nhà phát triển dễ dàng tạo, phát hành, duy trì, giám sát và bảo vệ API ở mọi quy mô. API đóng vai trò là \u0026ldquo;cửa trước\u0026rdquo; cho các ứng dụng để truy cập dữ liệu, logic nghiệp vụ hoặc chức năng từ các dịch vụ backend của bạn. Bằng cách sử dụng API Gateway, bạn có thể tạo các API RESTful và API WebSocket để kích hoạt các ứng dụng giao tiếp hai chiều theo thời gian thực. API Gateway hỗ trợ các khối lượng công việc có trong container và serverless, cũng như các ứng dụng web.\nClick vào đây để biết thêm thông tin về Amazon API Gateway\nNội dung Sau khi hoàn thành bài thực hành, bạn sẽ có thể:\nHiểu cách bạn có thể sử dụng một ứng dụng monolithic và chuyển nó thành một ứng dụng Single Page Web được lưu trữ trên Amazon S3 với sự hỗ trợ logic nghiệp vụ được cung cấp bởi Amazon API Gateway và AWS Lambda. Sử dụng AWS Console để tạo và cấu hình một Amazon Cognito User Pool và Identity Pool để sử dụng trong ứng dụng serverless của bạn. Triển khai thủ công một Lambda function sử dụng AWS CLI Triển khai thủ công một Lambda function sử dụng công cụ AWS CLI CloudFormation Cấu hình thủ công một API trong Amazon API Gateway Tự động hóa việc triển khai đầy đủ một API bằng CodeStar Tạo SDK từ Amazon API Gateway Kiến thức kỹ thuật cần có Để hoàn thành bài thực hành, bạn cần quen thuộc với AWS Management Console, Eclipse IDE và ngôn ngữ Java\nMôi trường Môi trường phát triển của chúng ta bao gồm các thành phần:\nJava 8 JDK Apache Maven Eclipse IDE for Java EE Developers Tomcat 9 AWS Toolkit for eclipse AWS CLI Elastic Beanstalk CLI Tất cả các tài nguyên cần thiết để bắt đầu lab này đã được cung cấp và thiết lập cho bạn. Nếu chạy trong tài khoản của riêng bạn, hãy sử dụng mẫu CloudFormation này Sơ đồ sau mô tả các tài nguyên đã được triển khai trong tài khoản AWS của bạn.\n"},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/3-create-single-page-app/3.1-create-dynamodb-table/","title":"Tạo DynamoDB Table","tags":[],"description":"","content":"Tạo DynamoDB Table populate_tripsector.sh populate_tripsector.sh (1 KB) Bạn hãy tải tập tin populate_tripsector.sh vào thư mục Downloads trong máy ảo Windows Mở Command Prompt Chạy lệnh dưới đây: set AWS_DEFAULT_PROFILE=devaxacademy cd Downloads populate_tripsector.sh \u0026lt;YOUR_REGION\u0026gt; Thay \u0026lt;YOUR_REGION\u0026gt; bằng Region của bạn\nTruy cập AWS DynamoDB Console. Click Explore items Nhập TravelBuddyTripSectors vào ô tìm kiếm nhấn Enter Chọn TravelBuddyTripSectors Trong phần Items returned, bạn sẽ thấy có 50 bản ghi "},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/2-prepare/2.1-createkeypair/","title":"Tạo Key Pair","tags":[],"description":"","content":"Tạo Key Pair Truy cập Amazon EC2 console. Trên thanh điều hướng bên trái, chọn Key Pairs. Chọn Create key pair. Tại trang Create key pair Tại mục Name, điền KPforDevAxInstances Tại mục Key pair type, chọn RSA Tại mục Private key file format, chọn .pem Click Create key pair Lưu file key pair để dùng ở các bước tiếp theo. "},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/4-configure-aaa/4.1-add-authentication-with-cognito/","title":"Thêm Xác thực vào SPA sử dụng Amazon Cognito User Pools","tags":[],"description":"","content":"www\\scripts\\webapp-configuration.js\nset AWS_PROFILE=devaxacademy Thêm Xác thực vào SPA sử dụng Amazon Cognito User Pools Trong phần này, chúng ta sẽ sử dụng Cognito User Pool và Identity Pool, đồng thời đánh dấu một trong các điểm cuối API của chúng tôi là yêu cầu xác thực qua Cognito User Pools.\nTruy cập AWS Cognito console. Click User pools Click TravelBuddy Lưu lại giá trị User pool ID Click App integration Lưu lại giá trị Client ID của App client name có tên TravelBuddyWebApp Click Federated Identities Click TravelBuddy Click Sample code Trong mục Get AWS Credentials, lưu lại giá trị Identity Pool ID xuất hiện trong đoạn mã Mở file có đường dẫn www\\scripts\\webapp-configuration.js trong thư mục www đã giải nén trong bước 1 phần 3.5 SPA được triển khai bằng cách sử dụng Angular framework, cho phép bạn xác định các hằng số toàn cục được sử dụng làm biến cấu hình trong toàn bộ ứng dụng của bạn. Tệp này xác định các giá trị của biến cấu hình mà bạn cần đặt dựa trên AWS Account’s ARN và ID của bạn cho các tài nguyên Cognito khác nhau.\nThay REPLACE_WITH_COGNITO_IDENTITY_POOL_ID bằng giá trị Identity Pool ID đã lưu trong bước 6 Thay REPLACE_WITH_COGNITO_USER_POOL bằng giá trị User pool ID đã lưu trong bước 2 Thay REPLACE_WITH_COGNITO_USER_POOL_CLIENT_ID bằng giá trị Client ID đã lưu trong bước 3 Thay REPLACE_WITH_S3_BUCKET_WWW bằng giá trị S3BucketWWWBucketName trong tab Output của stack DevAx-06 Trong phần AWS_REGION thay bằng Region của bạn Lưu lại Mở Command Prompt, chuyển đường dẫn đến thư mục www đã giải nén trong bước 1 phần 3.5 Chạy lệnh dưới đây set AWS_PROFILE=devaxacademy aws s3 sync . s3://\u0026lt;S3BucketWWWBucketName\u0026gt; Thay \u0026lt;S3BucketWWWBucketName\u0026gt; bằng giá trị S3BucketWWWBucketName trong tab Output của stack DevAx-06\n10. Làm mới trang web TravelBuddy và kiểm tra developer console để xác nhận rằng không có không có lỗi nào sau các thay đổi bạn đã thực hiện.\n"},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/2-prepare/","title":"Chuẩn bị","tags":[],"description":"","content":"Tổng quan Trong phần này chúng ta sẽ thực hiện tạo môi trường cho workshop bao gồm việc tạo Key Pair, tạo CloudFormation stack và kết nối Windows instance.\nNội dung: Tạo Key Pair Tạo CloudFormation stack Kết nối Windows instance "},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/2-prepare/2.2-createstack/","title":"Tạo CloudFormation stack","tags":[],"description":"","content":"Tạo CloudFormation stack Chúng ta sẽ dùng tập tin template dưới đây để tạo CloudFormation stack.\nTemplate File Module6.template.yaml (51 KB) Tải tệp tin Module6.template.yaml. Truy cập Amazon CloudFormation Console. Click Stacks Click Create stack. Click With new resources (standard). Trong phần Specify template. Chọn Upload a template file Click Choose file, sau đó chọn tệp tin Module6.template.yaml chúng ta đã tải về. Click Next. Trong phần Stack name gõ DevAx-06. Trong phần Stack name chọn KPforDevAxInstances. Click Next. Tại trang Configure stack options, Kéo màn hình xuống dưới sau đó Click Next. Tại trang Review. Kéo màn hình xuống dưới sau đó Click I acknowledge that AWS CloudFormation might create IAM resources with custom names. Click Create stack. Cloudformation sẽ mất khoảng 5 phút để tạo stack . Hãy đợi cho đến khi tất cả các stack ở trạng thái CREATE_COMPLETE.\n"},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/4-configure-aaa/4.2-setup-authentication/","title":"Thiết lập Xác thực cho Microservice","tags":[],"description":"","content":"Thiết lập Xác thực cho Microservice Ngay bây giờ, nếu bạn nhấp vào nút Go! trên trang web và không nhập thành phố để lọc, bạn sẽ thấy một hộp thoại với tất cả các chuyến đi có sẵn. Chúng ta muốn thay đổi hành vi này để bạn phải đăng nhập để có thể tìm kiếm tất cả các chuyến đi mà không cần bộ lọc. Đây chỉ là một ví dụ để chứng minh cách chúng ta có thể giới hạn các lệnh gọi API nhất định cho chỉ những người dùng được xác thực.\nTruy cập AWS API Gateway Console. Nhập iDevelop - Trip Search API vào ô tìm kiếm Click iDevelop - Trip Search API Click Gateway Responses Chọn Unauthorized Click Edit Để ứng dụng web của chúng ta có thể nhận được trạng thái unauthorized (401), chúng ta cần thêm CORS headers vào phản hồi. Nếu không có header, trình duyệt sẽ không có quyền nhận trạng thái 401. Chúng ta đã bật CORS cho phản hồi trạng thái 200 khi chúng ta thiết lập các API Gateway endpoint trước đó. Nhưng chúng ta cần cho phép trả lại trạng thái 401 một cách rõ ràng. Click Add response header Trong cột Response header của Response Header thứ 1, nhập Access-Control-Allow-Origin Cột Value, nhập '*' Trong cột Response header của Response Header thứ 2, nhập Access-Control-Allow-Headers Cột Value, nhập '*' Click Save Tạo một Authorizer sử dụng Cognito User Pool API Gateway tích hợp chặt chẽ với Cognito cho xác thực. Bạn chỉ cần khai báo Cognito User Pool là một authorizer cho API của bạn.\nClick Authorizers Click Create New Authorizer Tại mục Name, nhập TravelBuddy Tại mục Type, chọn Cognito Tại mục Cognito User Pool, chọn TravelBuddy Tại mục Token Source, nhập Authorization Click Create Mở yêu cầu xác thực cho microservice /trips Click Resources Chọn method GET trong /trips Click Method Request Tại mục Authorization, click biểu tượng bút chì Chọn TravelBuddy.Đây là authoriser mà chúng ta đã tạo ở bước trước và liên kết đến Cognito User Pool chúng ta đang sử dụng cho cơ sở dữ liệu người dùng. Nếu nó không xuất hiện, hãy thử làm mới trình duyệt của bạn. Click dấu tích xám để lưu lại "},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/3-create-single-page-app/3.2-build-and-deploy-serverless-microservice/","title":"Xây dựng và triển khai Serverless Microservice thủ công","tags":[],"description":"","content":"Xây dựng và triển khai Serverless Microservice thủ công aws s3 cp target/tripsearch-1.0.0.jar s3:// --region us-east-1 aws lambda create-function \u0026ndash;function-name idevelopTripSearchFromCity \u0026ndash;runtime java8 \u0026ndash;role arn:aws:iam::649966601103:role/LambdaRole \u0026ndash;handler devlounge.lambda.FindTripsFromCityHandler \u0026ndash;code S3Bucket=devax-06-s3bucketlambdacode4dbb269b-ydaa2pngaf8t,S3Key=tripsearch-1.0.0.jar \u0026ndash;timeout 15 \u0026ndash;description \u0026ldquo;TravelBuddy TripSearch microservice - FindTripsFromCity\u0026rdquo; \u0026ndash;memory-size 1024 \u0026ndash;region us-east-1\naws lambda create-function \u0026ndash;function-name idevelopFindTripsToCity \u0026ndash;runtime java8 \u0026ndash;role arn:aws:iam::649966601103:role/LambdaRole \u0026ndash;handler devlounge.lambda.FindTripsToCityHandler \u0026ndash;code S3Bucket=devax-06-s3bucketlambdacode4dbb269b-ydaa2pngaf8t,S3Key=tripsearch-1.0.0.jar \u0026ndash;timeout 15 \u0026ndash;description \u0026ldquo;TravelBuddy TripSearch microservice - FindTripsToCity\u0026rdquo; \u0026ndash;memory-size 1024 \u0026ndash;region us-east-1\nset AWS_PROFILE=devaxacademy mvn package shade:shade aws cloudformation package \u0026ndash;template template.yml \u0026ndash;s3-bucket devax-06-s3bucketlambdacode4dbb269b-ydaa2pngaf8t \u0026ndash;output-template template-export.yml aws cloudformation package \u0026ndash;template template.yml \u0026ndash;s3-bucket devax-06-s3bucketlambdacode4dbb269b-ydaa2pngaf8t \u0026ndash;output-template template-export.yml\nTrong bài tập này, bạn sẽ tự tạo và cấu hình một serverless microservice. Trong quá trình làm bài thực hành, bạn sẽ sử dụng các kỹ thuật khác nhau để xây dựng và triển khai, khi đó bạn có thể so sánh và đối chiếu hiệu quả của từng cách tiếp cận và phương pháp tự động hóa làm cho việc phát triển ứng dụng trở nên nhanh hơn và hiệu quả hơn cho các developer.\nBạn sẽ tạo thủ công TripSearch microservice. TripSearch microservice cung cấp các hàm sau:\n/trips - trả về danh sách tất cả các chuyến đi có sẵn trong hệ thống. /tripsfromcity - trả về danh sách tất cả các chuyến đi xuất phát từ một thành phố nhất định. /tripstocity - trả về danh sách tất cả các chuyến đi có điểm đến là một thành phố nhất định Đây là cùng một microservice mà chúng ta đã xem xét trong bài thực hành trước đây. Nhưng lần này, chúng ta sẽ cung cấp chức năng này trong trang web TravelBuddy của chúng ta và do đó, cần triển khai dịch vụ để chuẩn bị cho trang web. Trước đây, việc cấu hình API Gateway được quản lý bởi pipeline triển khai cho bạn - trong bài tập này, bạn sẽ cấu hình thủ công thiết cho cả hàm Lambda và API Gateway.\nTải mã nguồn và xây dựng thành phần cho triển khai TripSearchFull Project TripSearchFull.zip (21 KB) Bạn hãy tải tập tin TripSearchFull.zip và giải nén Mở Command Prompt và chuyển đường dẫn đến project TripSearchFull đã giải nén ở bước 1 Chạy lệnh dưới đây: set AWS_PROFILE=devaxacademy set DDB_TABLENAME_TRIPSECTOR=TravelBuddyTripSectors mvn test 3. Bạn sẽ thấy kết quả: Nhớ rằng thành phố đi và đến thể hiện ở đây và thời gian, ngày tháng sẽ khác so với môi trường triển khai của bạn vì nó được tạo ngẫu nhiên.\nBạn sẽ thấy không có thông báo lỗi nào khi chạy unit test và điều đó chắc chắn rằng mã nguồn của bạn đã chạy được như dự kiến. Nếu vẫn thấy lỗi, hãy thử kiểm tra thêm.\nTại sao bạn lại thấy thông báo AWS X-ray unavailable - ignoring? Khi bạn chạy test trong môi trường Development local, AWS X-RAy agent không khả dụng, và vì như vậy việc gọi từ AWS SDK không được ghi nhận vào X-Ray. Tuy nhiên, thiết lập trong pom.xml xác định sử dụng AWS X-Ray recorder, tất cả các lệnh gọi tới thông qua SDK (VD: gọi tới DynamoDB) sẽ được ghi nhận. Việc này sẽ gây phát sinh lỗi và test sẽ fail.\nChú ý rằng mỗi một lớp Lambda handler đều extend từ một lớp nền tên là LambdaHandlerWithXRayBase. Trong lớp này, có một khởi tạo static và nó xây dựng đối tượng ContextMissingStrategy, ghi đè hành động khi không có AWS X-Ray và thiết lập đó là hành động mặc định. Trong quá trình triển khai contextMissing handler, chúng ta có xuất ra một nội dung ra console, thay vì hành động mặc định là đưa ra exception. Việc triển khai lớp LambdaHandlerWithXRayBase tương tự như sau:\npublic class LambdaHandlerWithXRayBase { static { AWSXRayRecorderBuilder builder = AWSXRayRecorderBuilder.standard(); builder.withContextMissingStrategy(new ContextMissingStrategy() {\t@Override public void contextMissing(String arg0, Class\u0026lt;? extends RuntimeException\u0026gt; arg1) { System.out.println(\u0026#34;AWS X-ray unavailable - ignoring\u0026#34;); }\t}); AWSXRay.setGlobalRecorder(builder.build()); } } Là một thử nghiệm tùy chọn, bạn có thể thử xóa trình khởi tạo static khỏi lớp cơ sở LambdaHandlerWithXRayBase và chạy lại Maven build. Bạn sẽ thấy các lỗi như:\ncom.amazonaws.xray.exceptions.SegmentNotFoundException: Thread failed to begin a subsegment: segment not found. Verify that a segment is in progress, and that the SegmentContextResolverChain is configured correctly in order to discover the segment. Nếu không có agent, và lệnh gọi hàm Lambda trong trường hợp Id tương quan được chuyển chính xác đến nó, SegmentContextResolverChain không thể xác định phân vùng AWS X-ray để đính kèm metadata đã ghi vào và đưa ra exception. Việc triển khai chúng ta cung cấp trong lớp cơ sở sẽ ghi đè hành vi này, nhằm bỏ qua điều kiện này một cách an toàn trong khi thử nghiệm trên môi trường phát triển của bạn.\nNếu quá trình chạy unit test thành công, chạy câu lệnh mvn package shade:shade để build Sẽ mất một chút thời gian để build mã nguồn ứng dụng. Sau khi tập tin JAR đã được build sẽ nằm trong thư mục target của project và có tên là tripsearch-1.0.0.jar Truy cập Amazon CloudFormation Console. Click Stacks Nhập DevAx-06 vào ô tìm kiếm và nhấn Enter Click DevAx-06 Click tab Outputs Lưu giá trị LambdaRoleARN và S3BucketLambdaCodeBucketName để dùng trong bước tiếp theo Trong Command Prompt, chạy lệnh dưới đây aws s3 cp target/tripsearch-1.0.0.jar s3://\u0026lt;S3BucketLambdaCodeBucketName\u0026gt; --region \u0026lt;YOUR_REGION\u0026gt; Thay \u0026lt;S3BucketLambdaCodeBucketName\u0026gt; bằng giá trị S3BucketLambdaCodeBucketName chúng ta đã lưu trong bước 7\nThay \u0026lt;YOUR_REGION\u0026gt; bằng Region của bạn\n9. Chạy lệnh dưới đây để tạo một hàm Lambda mới từ cấu phần triển khai này\naws lambda create-function --function-name idevelopTripSearchFull --runtime java8 --role \u0026lt;LambdaRoleARN\u0026gt; --handler devlounge.lambda.FindAllTripsHandler --code S3Bucket=\u0026lt;S3BucketLambdaCodeBucketName\u0026gt;,S3Key=tripsearch-1.0.0.jar --timeout 15 --description \u0026#34;TravelBuddy TripSearch microservice - FindAllTrips\u0026#34; --memory-size 1024 --region \u0026lt;YOUR_REGION\u0026gt; Thay \u0026lt;LambdaRoleARN\u0026gt; bằng giá trị LambdaRoleARN chúng ta đã lưu trong bước 7\nThay \u0026lt;S3BucketLambdaCodeBucketName\u0026gt; bằng giá trị S3BucketLambdaCodeBucketName chúng ta đã lưu trong bước 7\nThay \u0026lt;YOUR_REGION\u0026gt; bằng Region của bạn\n10. Nếu thành công, hàm Lambda mới của bạn sẽ được tạo và bạn sẽ thấy kết quả trả về tương tự như sau: Tạo hai hàm Lambda mới sử dụng chung các thành phần triển khai Mã triển khai chức năng TripSearch của chúng ta có ba handler được cung cấp - một để tìm tất cả các chuyến đi; một để tìm các chuyến đi bắt nguồn từ một thành phố nhất định; và một để tìm các chuyến đi có một thành phố nhất định làm điểm đến. Hiện tại, chúng ta mới chỉ tiếp xúc với một handler - tìm kiếm cho tất cả các chuyến đi. Trong phần này, chúng ta sẽ tạo hai hàm Lambda mới, mỗi hàm cung cấp một trong hai handler còn lại.\nTạo một hàm Lambda mới từ cùng một cấu phần triển khai mà chúng ta đã tải lên trước đó. Chúng ta có thể tạo các hàm Lambda khác nhau từ cùng một thành phần vì tạo tác xuất ra nhiều Lambda handler. Ở bước trên, chúng ta đã cung cấp devlounge.lambda.FindAllTripsHandler. Trong bước này, chúng ta sẽ cung cấp devlounge.lambda.FindTripsFromCityHandler. Chạy câu lệnh dưới đây: aws lambda create-function --function-name idevelopTripSearchFromCity --runtime java8 --role \u0026lt;LambdaRoleARN\u0026gt; --handler devlounge.lambda.FindTripsFromCityHandler --code S3Bucket=\u0026lt;S3BucketLambdaCodeBucketName\u0026gt;,S3Key=tripsearch-1.0.0.jar --timeout 15 --description \u0026#34;TravelBuddy TripSearch microservice - FindTripsFromCity\u0026#34; --memory-size 1024 --region \u0026lt;YOUR_REGION\u0026gt; Thay \u0026lt;LambdaRoleARN\u0026gt; bằng giá trị LambdaRoleARN chúng ta đã lưu trong bước 7\nThay \u0026lt;S3BucketLambdaCodeBucketName\u0026gt; bằng giá trị S3BucketLambdaCodeBucketName chúng ta đã lưu trong bước 7\nThay \u0026lt;YOUR_REGION\u0026gt; bằng Region của bạn\n12. Tạo hàm Lambda cuối cùng với cùng thành phần triển khai, lần này là cho FindTripsToCity. Cũng như các bước trên, lần này chúng ta sẽ cung cấp devlounge.lambda.FindTripsToCityHandler.Chạy câu lệnh dưới đây:\naws lambda create-function --function-name idevelopFindTripsToCity --runtime java8 --role \u0026lt;LambdaRoleARN\u0026gt; --handler devlounge.lambda.FindTripsToCityHandler --code S3Bucket=\u0026lt;S3BucketLambdaCodeBucketName\u0026gt;,S3Key=tripsearch-1.0.0.jar --timeout 15 --description \u0026#34;TravelBuddy TripSearch microservice - FindTripsToCity\u0026#34; --memory-size 1024 --region \u0026lt;YOUR_REGION\u0026gt; Thay \u0026lt;LambdaRoleARN\u0026gt; bằng giá trị LambdaRoleARN chúng ta đã lưu trong bước 7\nThay \u0026lt;S3BucketLambdaCodeBucketName\u0026gt; bằng giá trị S3BucketLambdaCodeBucketName chúng ta đã lưu trong bước 7\nThay \u0026lt;YOUR_REGION\u0026gt; bằng Region của bạn\nChắc chắn rằng bạn sẽ được nhận các phản hồi thành công tương tự với hàm Lambda đã tạo đầu tiên.\n"},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/2-prepare/2.3-connectvirtualmachine/","title":"Kết nối Windows instance","tags":[],"description":"","content":"Kết nối Windows instance Truy cập Amazon EC2 console. Trên thanh điều hướng bên trái, chọn Intances. Chọn DevAxWindowsHost. Click Connect. Tại trang Connect to instance Click tab RDP client. Click Download remote desktop file. Chúng ta sẽ download file remote desktop xuống đường dẫn thư mục chứa key pair. Click Get password. Tại trang Get Windows password: Click Browse. Chọn file KPforDevAxInstances.pem đã tải về trong phần 2.1. Click Decrypt Password để giải mã thông tin password. Copy password đã được giải mã. Mở file DevAxWindowsHost.rdp bạn đã tải về trong bước 2. Click Connect. Điền thông tin password đã copy trong bước 4 Click OK. Click Don’t ask me again for connections to this computer. Click Yes. Bạn đã kết nối thành công. Cấu hình AWS CLI Gán quyền Administrator Access vào user awsstudent được tạo bởi Cloud Formation template Truy cập vào AWS IAM Console. Click Users. Click user awsstudent Trong phần Permissions policies Click Add permissions Trong trang Add permissions to awsstudent Click Attach existing policies directly Gõ AdministratorAccess vào ô tìm kiếm. Chọn AdministratorAccess Click Next:Review Click Add Permission Click tab Security credentials Click Create access key để tiến hành tạo access key Lưu thông tin Access key và Secret access key để phục vụ cho bước tiếp theo Chạy lệnh dưới đây aws configure set profile.devaxacademy.region \u0026lt;YOUR_REGION\u0026gt; aws configure set profile.devaxacademy.aws_access_key_id \u0026lt;YOUR_ACCESS_KEY_ID\u0026gt; aws configure set profile.devaxacademy.aws_secret_access_key \u0026lt;YOUR_SECRET_ACCESS_KEY\u0026gt; git config --global user.email \u0026lt;YOUR_EMAIL\u0026gt; git config --global user.name awsstudent Thay \u0026lt;your_region\u0026gt; bằng Region code Thay \u0026lt;access_key_id\u0026gt; bằng Access Key Id bạn đã lưu về trong bước 6\nThay \u0026lt;secret_access_key\u0026gt; bằng Secret Access Key bạn đã lưu về trong bước 6\n"},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/3-create-single-page-app/","title":"Tạo Single Page Application","tags":[],"description":"","content":"Tổng quan Trong bài thực hành này, bạn sẽ tạo một Ứng dụng Đơn trang (SPA) cho TravelBuddy. Một ứng dụng đơn trang là một ứng dụng web hoặc trang web tương tác với người dùng thông qua việc tự động viết lại trang hiện tại bằng các dữ liệu mới nhận được từ máy chủ web thay vì thực hiện tải một trang hoàn toàn mới theo cách thông thường. SPA sẽ tương tác thông qua một tập các API cung cấp bởi API Gateway.\nNội dung: Tạo DynamoDB Table Xây dựng và triển khai Serverless Microservice thủ công Tạo và Cung cấp API với Amazon API Gateway Triển khai API với Codestar và CI/CD Thiết lập trang SPA Tạo một Client để sử dụng API "},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/3-create-single-page-app/3.3-create-api-with-api-gateway/","title":"Tạo và Cung cấp API với Amazon API Gateway","tags":[],"description":"","content":"Tạo và Cung cấp API với Amazon API Gateway set AWS_PROFILE=devaxacademy set DDB_TABLENAME_TRIPSECTOR=TravelBuddyTripSectors mvn test aws s3 cp target/tripsearch-1.0.0.jar s3:// --region us-east-1 aws lambda create-function \u0026ndash;function-name idevelopTripSearchFromCity \u0026ndash;runtime java8 \u0026ndash;role arn:aws:iam::649966601103:role/LambdaRole \u0026ndash;handler devlounge.lambda.FindTripsFromCityHandler \u0026ndash;code S3Bucket=devax-06-s3bucketlambdacode4dbb269b-ydaa2pngaf8t,S3Key=tripsearch-1.0.0.jar \u0026ndash;timeout 15 \u0026ndash;description \u0026ldquo;TravelBuddy TripSearch microservice - FindTripsFromCity\u0026rdquo; \u0026ndash;memory-size 1024 \u0026ndash;region us-east-1\naws lambda create-function \u0026ndash;function-name idevelopFindTripsToCity \u0026ndash;runtime java8 \u0026ndash;role arn:aws:iam::649966601103:role/LambdaRole \u0026ndash;handler devlounge.lambda.FindTripsToCityHandler \u0026ndash;code S3Bucket=devax-06-s3bucketlambdacode4dbb269b-ydaa2pngaf8t,S3Key=tripsearch-1.0.0.jar \u0026ndash;timeout 15 \u0026ndash;description \u0026ldquo;TravelBuddy TripSearch microservice - FindTripsToCity\u0026rdquo; \u0026ndash;memory-size 1024 \u0026ndash;region us-east-1\nset AWS_PROFILE=devaxacademy mvn package shade:shade aws cloudformation package \u0026ndash;template template.yml \u0026ndash;s3-bucket devax-06-s3bucketlambdacode4dbb269b-ydaa2pngaf8t \u0026ndash;output-template template-export.yml aws cloudformation package \u0026ndash;template template.yml \u0026ndash;s3-bucket devax-06-s3bucketlambdacode4dbb269b-ydaa2pngaf8t \u0026ndash;output-template template-export.yml\nTruy cập AWS API Gateway console. Trong phần Choose an API type, tìm REST API - Develop a REST API where you gain complete control over the request and response along with API management capabilities. Click Build Click OK Trong phần Create new API, chọn New API Tại mục API name, điền iDevelop - Trip Search API Tại mục Description, điền Allows searching ở trips from/to cities Click Create API API sẽ được tạo và chỉ có đường dẫn root. Click Actions Click Create Resource Trong trang New Child Resource Tại mục Resource Name, điền trips Đánh dấu vào Enable API Gateway CORS Click Create Resource Resource /trips sẽ được tạo. Chọn vào đường dẫn /trips Click Actions Click Create Method Trong danh sách liệt kê xuất hiện, chọn GET Chọn dấu tick nâu bên cạnh để xác nhận lưu thiết lập. Tại mục Lambda Region, chọn Region của bạn Tại mục Lambda Function, nhập idevelop và chọn idevelopTripSearchFull Click Save Click OK Khi method được tạo, bạn sẽ thấy bảng Method Execution: Click Test Click Test Sau một vài phút để hàm Lambda khởi chạy và thực thi, bạn sẽ thấy kết quả tương tự như sau: Click /trips Click Actions Click Enable CORS Click Enable CORS and replace existing CORS headers Click Yes, replace existing values Khi các mục liệt kê có dấu tích xanh, bạn có thể tiếp tục các bước kế. Sẽ mất một ít thời gian để hoàn thành. Cung cấp /tripsfromcity RESTful API endpoint Đường dẫn đầu tiên mà chúng ta cung cấp khá đơn giản - /trips sẽ lấy tất cả các chuyến đi trong hệ thống.\nNhưng chúng ta biết việc triển khai mã nguồn của chúng ta cho phép chúng ta chỉ định một bộ lọc để truy vấn ở các chuyến đi xuất phát từ một thành phố cụ thể hoặc có điểm đến cụ thể. Vì vậy chúng ta muốn hiển thị chức năng này cho người dùng API của mình. Đầu tiên, chúng ta sẽ hiển thị đường dẫn /tripfromcity.\nTrong phần Resources, click / Click Actions Click Create Resource Tại mục Resource Name, điền tripsfromcity Chọn Enable API Gateway CORS CLick Create Resource Lệnh gọi của chúng ta vào hàm Lambda yêu cầu thông số city. Chúng ta sẽ đi theo tiêu chuẩn ở RESTful interface và chuyển tham số này vào dưới dạng tham số truyền trên URL. Chọn /tripsfromcity Click Actions Click Create Resource Tại mục Resource Name, điền {city} Tại mục Resource Path, xóa nội dung mặc định và điền {city} Click Create Resource Click /{city} Click Actions Click Create Method Trong danh sách liệt kê, chọn GET Click tick xám bên cạnh để xác nhận lưu thiết lập. Tại mục Lambda Region. chọn Region của bạn Tại mục Lambda Function, nhập idevelop và chọn idevelopTripSearchFromCity Click Save Click OK Khi method được tạo, bạn sẽ thấy bảng Method Execution. Chúng ta không thể tiếp tục thực hiện kiểm thử gọi đến API bởi vì chúng ta cần biến đổi yêu cầu thông qua API Gateway nhằm lấy được thông tin {city} được truyền qua hàm Lambda chính xác. devlounge.lambda.FindTripsFromCityHandler handler cần thấy được thông số truyền vào từ yêu cầu như sau:\n{ \u0026#34;payload\u0026#34; : { \u0026#34;city\u0026#34;: \u0026#34;Melbourne\u0026#34; } } Điều này sẽ khiến hàm Lambda tìm kiếm DynamoDB ở tất cả các chuyến đi xuất phát từ Melbourne. Chúng ta cần thêm một Body Mapping Template cho method này ở API Gateway nhằm chuyển đổi thông số cho đúng theo yêu cầu.\nClick Integration Request Click Mapping Templates Click When there are no templates defined (recommended) Click Add mapping template Trong mục Content-Type, nhập application/json Click dấu tick xám để lưu lựa chọn. Bên dưới mục Generate template, nhập { \u0026#34;payload\u0026#34; : { \u0026#34;city\u0026#34;: \u0026#34;$input.params(\u0026#39;city\u0026#39;)\u0026#34; } } Template này sẽ lấy tham số {city} từ URL và thêm nó vào JSON payload và gửi đến hàm Lambda giống như hàm Lambda mong đợi.\nClick Save Schema được định nghĩa ở đây cho hàm Lambda này là hoàn toàn có thể tùy chỉnh và trong ứng dụng của bạn, bạn có thể sử dụng một mô hình hoàn toàn khác. Mẫu ánh xạ cung cấp cho bạn sự linh hoạt để chuyển đổi dữ liệu đến một cách nhanh chóng thông qua API Gateway endpoint.\nClick Method Execution Click Test Trong mục Path, tại trường {city}, nhập Melbourne Click Test API Gateway sẽ thực hiện lệnh gọi vào hàm Lambda, truyền giá trị Melbourne vào Body Mapping Template mà bạn đã xác định, chèn tham số tìm kiếm Melbourne vào JSON payload được gửi đến hàm Lambda. Điều này sẽ khiến handler sử dụng JSON và thực hiện tìm kiếm trong bảng DynamoDB và trả về kết quả. Bạn sẽ thấy một kết quả tương tự như sau: Chọn /{city} trong phần /tripsfromcity Click Actions Click Enable CORS Click Enable CORS and replace existing CORS headers Click Yes, replace existing values Khi các mục liệt kê có dấu tick xanh, bạn có thể tiếp tục các bước kế. Sẽ mất một ít thời gian để hoàn thành. Click / trong phần Resources Click Actions Click Create Resource Tại mục Resource Name, nhập tripstocity Chọn Enable API Gateway CORS Click Create Resource Lệnh gọi của chúng ta vào hàm Lambda yêu cầu thông số city. Chúng ta sẽ đi theo tiêu chuẩn ở RESTful interface và chuyển tham số này vào dưới dạng tham số truyền trên URL. Click /tripstocity Click Actions Click Create Resource Tại mục Resource Name, nhập {city} Tại mục Resource Path, xóa nội dung mặc định và nhập {city} Chọn Enable API Gateway CORS Click Create Resource CLick /{city} trong phần /tripstocity Click Actions Click Create Method Trong danh sách liệt kê, chọn GET Click dấu tick xám bên cạnh để xác nhận lưu thiết lập. Trong mục Lambda Region, chọn Region của bạn Tại mục Lambda Function, nhập idevelop và chọn idevelopTripSearchToCity Click Save Click OK Khi method được tạo, bạn sẽ thấy bảng Method Execution. Chúng ta không thể tiếp tục thực hiện kiểm thử gọi đến API bởi vì chúng ta cần biến đổi yêu cầu thông qua API Gateway nhằm lấy được thông tin {city} được truyền qua hàm Lambda chính xác. devlounge.lambda.FindTripsToCityHandler handler cần thấy được thông số truyền vào từ yêu cầu như sau:\n{ \u0026#34;payload\u0026#34; : { \u0026#34;city\u0026#34;: \u0026#34;Melbourne\u0026#34; } } Điều này sẽ khiến hàm Lambda tìm kiếm DynamoDB ở tất cả các chuyến đi đến Melbourne. Chúng ta cần thêm một Body Mapping Template cho method này ở API Gateway nhằm chuyển đổi thông số cho đúng theo yêu cầu.\nClick Integration Request Click Mapping Templates Chọn When there are no templates defined (recommended) Click Add mapping template Tại mục Content-Type, nhập application/json Click dấu tick xám để lưu lựa chọn. Bên dưới mục Generate template, nhập { \u0026#34;payload\u0026#34; : { \u0026#34;city\u0026#34;: \u0026#34;$input.params(\u0026#39;city\u0026#39;)\u0026#34; } } Click Save Click Method Execution Click Test Trong mục Path, tại trường {city}, nhập Melbourne Click Test API Gateway sẽ thực hiện lệnh gọi vào hàm Lambda, truyền giá trị Melbourne vào Body Mapping Template mà bạn đã xác định, chèn tham số tìm kiếm Melbourne vào JSON payload được gửi đến hàm Lambda. Điều này sẽ khiến handler sử dụng JSON và thực hiện tìm kiếm trong bảng DynamoDB và trả về kết quả. Bạn sẽ thấy một kết quả tương tự như sau: Click /{city} trong phần /tripstocity Click Actions Click Enable CORS CLick Enable CORS and replace existing CORS headers Click Yes, replace existing values Khi các mục liệt kê có dấu tick xanh, bạn có thể tiếp tục các bước kế. Sẽ mất một ít thời gian để hoàn thành. Nếu đã hoàn thành đến đây, bạn sẽ có một cây Resource nhìn tương tự như thế này: Triển khai API và Kiểm thử Trong phần Resources, click / Click Actions CLick Deploy API Tại mục Deployment stage, chọn [New Stage] Tại mục Stage name, nhập prod Tại mục Stage description, nhập Trips API Tại mục Deployment description, nhập Initial deployment Click Deploy Stage mới tên prod sẽ được tạo và bạn sẽ thấy prod Stage Editor Click Invoke URL Một cửa sổ mới sẽ mở ra và truy cập đến địa chỉ đó. Bạn sẽ thấy một thông báo lỗi nêu rõ {\u0026ldquo;message\u0026rdquo;:\u0026ldquo;Missing Authentication Token\u0026rdquo;}. Điều này là do không có trình xử lý ở đường dẫn gốc của stage - bạn chỉ có các resources/methods được xác định bên dưới các đường dẫn /trips, /tripsfromcity và /tripstocity. Chỉnh sửa URL trong thanh URL của trình duyệt và thêm /trips rồi nhấn Enter. Trang sẽ làm mới và sau đó hiển thị tất cả các chuyến đi có sẵn dưới dạng JSON. Đầu ra sẽ tương tự như sau: Kiểm tra method /tripsfromcity, sử dụng /tripsfromcity/Melbourne để tìm kiếm tất cả các chuyến đi khởi hành từ Melbourne. Kiểm tra method /tripstocity, sử dụng /tripstocity/Melbourne để tìm kiếm tất cả các chuyến đi đến Melbourne. Nếu dữ liệu có vẻ đúng và không có lỗi, bạn đã sẵn sàng chuyển sang phần tiếp theo.\nSử dụng CloudFormation/SAM thông qua AWS CLI để triển khai microservice HotelSearch Trong các bước trước đó, bạn đã triển khai và cấu hình microservice TripSearch theo cách thủ công, bao gồm các hàm Lambda và API Gateway resource. Bạn sẽ nhận thấy rằng có khá nhiều bước cần làm và thực hiện việc này theo cách thủ công rất tốn thời gian và dễ xảy ra lỗi. Trong bước này, bạn sẽ sử dụng AWS CLI và CloudFormation/SAM để triển khai microservice HotelSearch, thay vì triển khai thủ công các tài nguyên.\nBằng cách sử dụng CloudFormation/SAM, nhiều bước thủ công sẽ được thực hiện cho bạn, sắp xếp quy trình triển khai. Bạn vẫn sẽ phải kích hoạt quy trình theo cách thủ công, nhưng việc triển khai thực tế sẽ được tự động hóa.\nHotelSpecials microservice cần truy cập vào cơ sở dữ liệu MySQL để truy xuất dữ liệu về các dữ liệu đặc biệt của khách sạn. Môi trường bài thực hành đã tự động triển khai và tạo cơ sở dữ liệu cho bạn và chi tiết kết nối được cung cấp trong CloudFormation Outputs với hướng dẫn bên dưới về nơi cập nhật các thông số trong template mà bạn sẽ sử dụng để triển khai microservice. Cơ sở dữ liệu MySQL đã được triển khai bằng Amazon RDS và không thể truy cập công khai vì nó được khởi chạy trong một mạng con riêng tư. Do đó, để hàm Lambda để có thể kết nối với cơ sở dữ liệu, hàm Lambda cũng sẽ cần được triển khai thành một mạng con riêng bằng cách kích hoạt VPC Integration. Tập tin template.yml được cung cấp có tất cả các thiết lập cần thiết để thực hiện việc này, bạn chỉ cần cập nhật các thông số theo hướng dẫn bên dưới.\nHotelSpecials Project HotelSpecials.zip (33 KB) Tải file HotelSpecials.zip và giải nén Mở Command Prompt và chuyển đường dẫn đến project HotelSpecials đã giải nén ở bước 65 Chạy câu lệnh dưới đây: set AWS_PROFILE=devaxacademy mvn package shade:shade 67. Sau khi tập tin JAR đã được build sẽ nằm trong thư mục target của project và có tên là hotelspecials-1.0.0.jar 68. Truy cập AWS CloudFormation Console.\nClick Stack. Nhập DevAx-06 vào ô tìm kiếm và nhấn Enter. Click DevAx-06. Click tab Output Lưu lại giá trị DatabaseSecurityGroup, DatabaseSubnet1, DatabaseSubnet2, RDSEndpoint và S3BucketLambdaCodeBucketName để sử dụng trong bước tiếp theo. Trong Eclipse IDE, mở file template.yml Thay \u0026lt;DatabaseSecurityGroup\u0026gt; bằng giá trị DatabaseSecurityGroup đã lưu trong bước 69 Thay \u0026lt;DatabaseSubnet1\u0026gt; bằng giá trị DatabaseSubnet1 đã lưu trong bước 69 Thay \u0026lt;DatabaseSubnet2\u0026gt; bằng giá trị DatabaseSubnet2 đã lưu trong bước 69 Thay \u0026lt;RDSEndpoint\u0026gt; bằng giá trị RDSEndpoint đã lưu trong bước 69 Trong Command Prompt, chạy câu lệnh dưới đây để để đóng gói hàm Lambda (từ thành phần triển khai bạn đã tạo) aws cloudformation package --template template.yml --s3-bucket \u0026lt;S3BucketLambdaCodeBucketName\u0026gt; --output-template template-export.yml Thay \u0026lt;S3BucketLambdaCodeBucketName\u0026gt; bằng giá trị S3BucketLambdaCodeBucketName đã lưu trong bước 69\nLệnh sẽ tải lên các artifact vào S3 bucket, sau đó cập nhật con trỏ template.yml thành artifact trên S3 và ghi ra một mẫu mới có kèm theo bản cập nhật này vào một tệp có tên template-export.yml.\nSẽ mất một hoặc hai phút để hoàn tất quá trình tải lên artifact.\n73. Chạy lệnh dưới đây để tạo và triển khai CloudFormation Change Set\naws cloudformation deploy --template-file template-export.yml --stack-name HotelSpecialsAPI --capabilities CAPABILITY_IAM 74. Truy cập AWS CloudFormation Console.\nClick Stack. Bạn sẽ thấy stack có tên HotelSpecialsAPI. Điều này cho thấy rằng CloudFormation Change Set đã được tạo. Lệnh bạn đã đưa ra sẽ tạo Change Set và sau đó tự động thực hiện Change Set. Sẽ mất một vài phút để hoàn tất quá trình thực thi. Chọn HotelSpecialsAPI stack, click tab Events và xem lại các bước mà CloudFormation template đã áp dụng cho môi trường của bạn. Chúng sẽ khớp với các tài nguyên và hành động trong tập tin template-output.yml. Truy cập AWS API Gateway console Click iDevelop - Hotel Specials API Click Get Click Integration Request Bảng Integration Request sẽ xuất hiện. Lambda Function xác định: Giá trị được chỉ định không phải là một hàm Lambda, mà thay vào đó, là một Stage Variable sẽ được thay thế trong thời gian chạy bằng API Gateway. Do đó, để lệnh gọi API này thành công, Stage trong API Gateway phải xác định một giá trị cho Stage Variable envHotelSpecials\nClick Stages Click prod Click tab Stage Variables Một biến duy nhất được xác định - envHotelSpecials - giống với tên biến giai đoạn mà phương thức GET đã mong đợi. Giá trị của biến là GetHotelSpecials là tên của hàm Lambda mà mẫu được tạo bằng cách sử dụng tập tin JAR mà bạn đã tạo và tải lên trong quá trình đóng gói/triển khai.\nKiểm thử HotelSpecials API Mở rộng prod trong Stages để xem cấu trúc. Click Get Click Invoke URL Sau một khoảng thời gian, hàm Lambda khởi tạo, bạn sẽ thấy kết quả JSON truy xuất dữ liệu từ cơ sở dữ liệu MySQL về từ hàm Lambda Nếu bạn thấy một kết quả JSON không có lỗi, bạn đã triển khai thành công một API và hỗ trợ hàm Lambda truy vấn cơ sở dữ liệu mySQL.\nChú ý rằng chúng nhanh hơn và dễ hơn việc triển khai thủ công như thế nào?\nĐó là sức mạnh của tự động hóa. Trong bài tập tiếp theo, chúng ta sẽ thực hiện bước này xa hơn, sử dụng phương pháp tiếp cận CI/CD pipeline (hiện đã phổ biến) để triển khai API tiếp theo của chúng ta.\n"},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/4-configure-aaa/4.3-deploy-and-test/","title":"Triển khai và Kiểm thử","tags":[],"description":"","content":"Triển khai và Kiểm thử Hành động mới Click Actions Click Deploy API Tại mục Deployment stage, chọn prod Click Deploy Chuyển sang trang TravelBuddy SPA, và làm mới nó. Không nhập giá trị đích đến, nhấp vào Go!. Sau một lúc, bạn sẽ thấy một bong bóng hiện lên và thông báo bạn cần đăng nhập để có thể sử dụng tính năng. "},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/4-configure-aaa/","title":"Cấu hình Authentication, Authorization và Accounting (AAA)","tags":[],"description":"","content":"Tổng quan Hiện tại, TravelBuddy SPA của chúng ta không yêu cầu bất kỳ xác thực nào để gọi các dịch vụ API mà chúng ta đã cung cấp. Quá trình thiết lập bài thực hành đã cung cấp Cognito User Pool và một Cognito Identity Pool trong tài khoản của bạn. Cognito User Pool là hệ thống hồ sơ được quản lý hoàn toàn về người dùng trong ứng dụng của bạn. Identity Pool được sử dụng để lấy thông tin đăng nhập AWS IAM tạm thời để ký các yêu cầu yêu cầu SigV4 signing. Cognito Identity Pool liên kết giữa nhiều Identity Providers, nhưng trong ví dụ thực hành của chúng ta, chúng ta chỉ có một Identity Provider (User Pool). TravelBuddy SPA của chúng ta thực tế không có yêu cầu về thông tin xác thực IAM, nhưng chúng ta đã triển khai tính năng này để chứng minh cách bạn có thể thực hiện điều này. Trong một Bài tập thử thách, chúng ta sẽ yêu cầu bạn triển khai AWS IAM Authorization cho việc gọi vào API Gateway, nhưng đây là một nhiệm vụ khong bắt buộc đối với bài thực hành.\nNội dung: Thêm Xác thực vào SPA sử dụng Amazon Cognito User Pools Thiết lập Xác thực cho Microservice Triển khai và Kiểm thử Đăng ký người dùng mới và đăng nhập "},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/4-configure-aaa/4.4-add-new-user-signup_signin/","title":"Đăng ký người dùng mới và đăng nhập","tags":[],"description":"","content":"Đăng ký người dùng mới và đăng nhập Truy cập Amazon Cognito Console. Click Federated Identities Click TravelBuddy Click Edit identity pool Tại đây chúng ta có thể thiết lập Unauthenticated roles (roles xác định khi người dùng không đăng nhập), và Authenticated roles (roles xác định khi người dùng đăng nhập). Xác minh rằng Unauthenticated role được thiết lập chứa chuỗi CognitoIAMUnauthenticatedRole. Thông tin này được thiết lập khi tạo bài thực hành. Xác minh rằng Authenticated role được thiết lập chứa chuỗi CognitoIAMAuthenticatedRole. Thông tin này được thiết lập khi tạo bài thực hành. Giờ đây, bạn đã có mọi thứ để đăng ký và đăng nhập với tư cách người dùng, sau đó kiểm tra hành vi đăng nhập của microservice /trips bây giờ rằng nó được bảo vệ bằng cách yêu cầu ủy quyền.\nTrong trang TravelBuddy, click Login or Register Click Sign-up here! Tại mục First Name, nhập tên của bạn Tại mục Last Name, nhập họ của bạn Tại mục Email Address, nhập địa chỉ email của bạn Bạn phải cung cấp địa chỉ email hợp lệ - địa chỉ mà bạn có quyền truy cập, để bạn sẽ nhận được một mã xác minh.\nTại mục Password nhập mật khẩu của bạn Click Register Kiểm tra email của bạn, lưu lại mã xác minh Tại mục Verification Code, nhập mã xác minh đã lưu trong bước 8 Click Verify Đăng nhập bằng thông tin đăng nhập (địa chỉ email và mật khẩu) bạn đã cung cấp trong quá trình đăng ký. Bây giờ bạn đã đăng nhập và bạn sẽ thấy phần My Account Click My Account, chúng ta sẽ thấy tính năng duy nhất được triển khai là tùy chọn đăng xuất Click Go! mà không nhập bất cứ nội dung gì. Chúng ta sẽ thấy danh sách đầy đủ các chuyến đi trong hộp thoại Đăng xuất và click Go! mà không nhập bất cứ nội dung gì. Chúng ta sẽ thấy thông báo lỗi. "},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/3-create-single-page-app/3.4-deploy-api-with-codestar/","title":"Triển khai API với Codestar và CI/CD","tags":[],"description":"","content":"Tạo một CI/CD pipeline với AWS CodeStar cd C:\\Users\\Administrator\\git\\FlightSpecialsAPI git checkout -b \u0026#34;new-implementation\u0026#34; cd C:\\Users\\Administrator\\Downloads\\FlightSpecials copy_files.sh C:\\Users\\Administrator\\git\\FlightSpecialsAPI git checkout \u0026ldquo;new-implementation\u0026rdquo;\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.3.RELEASE\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-autoconfigure\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.3.RELEASE\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.json\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;json\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;20180130\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.amazonaws.serverless\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;aws-serverless-java-container-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.1.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.junit.jupiter\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit-jupiter-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.2.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Truy cập AWS CodeStar Console. Click Projects Click Create project Click Create service role nếu đây là lần đầu bạn truy cập vào dịch vụ AWS CodeStar.\nTrong phần Templates, chọn Java và AWS Lambda Chọn Java Spring Click Next Tại mục Project name, nhập FlightSpecialsAPI Click Next Tại trang Review, click Create project Thêm tài khoản awsstudent vào Team với vai trò Owner. Click Team Click Add team member Trong phần Team member details Tại mục User, chọn awsstudent Tại mục Email address, điền email của bạn Tại mục Project role, chọn Owner CLick Allow SSH access to project instances. Click Add team member Kiểm tra team member được add vào thành công Truy cập AWS CloudFormation Console. Click Stack. Nhập DevAx-06 vào ô tìm kiếm và nhấn Enter. Click DevAx-06. Click tab Output Lưu lại giá trị GitPassword và GitUserName để sử dụng trong bước tiếp theo. Mở Eclipse IDE. Click dấu mũi tên xuống cạnh biểu tượng AWS Click Import AWS CodeStar Project… Chọn region chúng ta đang sử dụng Chọn FlightSpecialsAPI Điền thông tin đã lưu trong bước 9 vào phần User name và Password Click Next Click OK, bỏ qua lỗi org.eclipse.egit.ui.internal.repository.tree.RepositoryTreeNodeType.getIcon()Lorg/eclipse/swt/graphics/Image; Chọn master branch và click Next. Click Finish. Click No để bỏ qua thiết lập password hint. Project sample tạo bởi CodeStar đã được import hoàn chỉnh Mở Command Prompt, chạy câu lệnh dưới đây để chuyển đường dẫn tới project CodeStar bạn đã import và tạo nhánh mới cd C:\\Users\\Administrator\\git\\FlightSpecialsAPI git checkout -b \u0026#34;new-implementation\u0026#34; FlightSpecials Project FlightSpecials.zip (15 KB) Tải file project FlightSpecials.zip về và giải nén. Trong Command Prompt, chuyển đường dẫn tới thư mục project FlightSpecials đã giải nén trong bước 17 Chạy câu lệnh dưới đây để ghi đè phần triển khai do CodeStar cung cấp bằng nội dung của tập tin FlightSpecials.zip đã giải nén trong bước 17. Chúng ta có script copy_files.sh trong tập tin FlightSpecials.zip mà bạn có thể dùng để ghi đè copy_files.sh C:\\Users\\Administrator\\git\\FlightSpecialsAPI 19. Trong Eclipse IDE, nhấp chuột phải vào project FlightSpecialsAPI chúng ta đã import\nClick Maven Click Update Project\u0026hellip; Cấp quyền cho CloudFormation để tạo IAM role Truy cập vào AWS IAM Console. Click Roles. Nhập CodeStarWorker-flightspecialsa-CloudFormation vào ô tìm kiếm và nhấn Enter Click CodeStarWorker-flightspecialsa-CloudFormation. Nếu bạn không thể tìm thấy role, có thể do còn quá sớm - CodeStar vẫn đang trong quy trình cấp phát và có thể chưa tạo role. Kiểm tra tiến trình cung cấp trong CodeStar dashboard.\nClick Add permissions Click Attach Policies Nhập idevelop vào ô tìm kiếm và nhấn Enter Chọn idevelopCodeStarCloudFormationPolicy Click Attach Policies Cập nhật các thông số trong CloudFormation template Trong Eclipse IDE, mở tập tin template.yml Làm tương tự bước 68 và bước 69 trong phần 3.3 để lấy giá trị DatabaseSecurityGroup, DatabaseSubnet1, DatabaseSubnet2 và RDSEndpoint Thay \u0026lt;DatabaseSecurityGroup\u0026gt; bằng giá trị DatabaseSecurityGroup Thay \u0026lt;DatabaseSubnet1\u0026gt; bằng giá trị DatabaseSubnet1 Thay \u0026lt;DatabaseSubnet2\u0026gt; bằng giá trị DatabaseSubnet2 Thay \u0026lt;RDSEndpoint\u0026gt; bằng giá trị RDSEndpoint Lưu lại Cập nhật AWS region trong tập tin định nghĩa API swagger.yml Tập tin swagger.yml được cung cấp trong gói zip là định nghĩa cho API sẽ cung cấp microservice thông qua Amazon API Gateway. Nó cần được cập nhật thông tin chi tiết về AWS Account ID trong bài thực hành của bạn và Region AWS mục tiêu trước khi bạn có thể triển khai dịch vụ vi mô của mình.\nTrong Eclipse IDE, mở tập tin swagger.yml Nhấn tổ hợp phím Ctrl+F Tại mục Find, điền REPLACE_AWS_REGION Tại mục Replace with, điền Region bạn đang làm bài thực hành này Click Replace All để thay thế Tại mục Find, điền REPLACE_AWS_ACCOUNTID Tại mục Replace with, điền AWS Account Id của bạn Click Replace All để thay thế Lưu lại Bây giờ bạn đã hoàn tất cập nhật tập tin, bạn cần thêm các tập tin đã thay đổi vào new-implementation git branch và xác nhận các thay đổi. Mở Command Prompt, chạy câu lệnh dưới đây để chuyển đường dẫn tới thư mục project FlightSpecialsAPI và xem lại thay đổi chưa được commit cd C:\\Users\\Administrator\\git\\FlightSpecialsAPI git status 27. Chạy lệnh dưới đây để thêm những tập tin thay đổi\ngit add . git commit -m \u0026#34;Baseline implementation\u0026#34; 28. Chạy lệnh dưới đây để chuyển về nhánh master\ngit checkout master 29. Chạy lệnh dưới đây để để merge thay đổi từ nhánh new-implementation vào nhánh master\ngit merge new-implementation 30. Trong Eclipse IDE, nhấp chuột phải vào project FlightSpecialsAPI\nClick Team Click Push to origin. Click Close Bạn cần thực hiện đẩy từ Eclipse vì thông tin xác thực git được nhúng trong môi trường Eclipse. Bạn cũng có thể định cấu hình môi trường dòng lệnh bằng thông tin đăng nhập git nhưng điều đó nằm ngoài phạm vi của phòng thí nghiệm này.\nSẽ mất một vài phút để đẩy mã và bắt đầu triển khai. Kiểm tra mã nguồn và các template sẽ kích hoạt quá trình xây dựng và triển khai thực hiện mới. AWS CodePipeline hiện sẽ sử dụng CloudFormation để triển khai các tài nguyên sau:\nHàm Lambda được triển khai bởi mã Java mà bạn đã kiểm tra trong CodeCommit IAM role cho hàm Lambda Cấu hình API Gateway cho API Trong khi bạn có chút thời gian, hãy dành vài phút để khám phá buildspec.yml, swagger.yml và template.yml các tệp xác định Amazon API Gateway, hàm AWS Lambda và quá trình build/deploy thông qua AWS CodeBuild. Bạn sẽ nhận thấy rằng tập tin builspec.yml sử dụng cùng một lệnh AWS CLI để đóng gói triển khai mà bạn đã sử dụng khi đóng gói HotelSpecials API theo cách thủ công trước đó:\nĐừng thực thi lệnh bên dưới, chúng chỉ để bạn tham khảo thêm.\nmvn package shade:shade aws cloudformation package --template template.yml --s3-bucket $S3_BUCKET --output-template template-export.yml Tập tin template.yml sử dụng Serverless Application Model (SAM) chuyển đổi để xác định API REST, trái ngược với cách chúng ta tiếp cận điều này trong HotelSpecials API. Trong HotelSpecials, CloudFormation template đã sử dụng CloudFormation chuẩn để xác định API REST để nó có thể rõ ràng về định nghĩa API và bao gồm swagger. FlightSpecials sử dụng cách tiếp cận khai báo nhiều hơn và để lại thông tin chi tiết cho SAM. Bạn có thể tự do kết hợp CloudFormation và SAM trong cùng một template, như bạn có thể thấy từ các ví dụ này. Lưu ý rằng biến môi trường $S3_BUCKET được CodeBuild tự động thay thế khi bước xây dựng được thực hiện và được thay thế bằng S3 bucket mà CodeStar đã cung cấp khi thiết lập dự án.\nKiểm thử API FlightSpecials Truy cập AWS API Gateway console Nhập iDevelop - Flight Specials API vào ô tìm kiếm và nhấn Enter Click iDevelop - Flight Specials API Click Stages Click dấu mũi tên bên cạnh prod Click GET Click Invoke URL Sau một lúc khi hàm Lambda được khởi tạo, bạn sẽ thấy kết quả JSON của việc truy vấn cơ sở dữ liệu MySQL từ hàm Lambda Nếu bạn thấy một JSON payload không có lỗi, bạn đã triển khai thành công một API và hỗ trợ hàm Lambda truy vấn cơ sở dữ liệu MySQL. Lưu ý rằng việc triển khai nhanh hơn và dễ dàng hơn mà không cần bất kỳ sự can thiệp thủ công nào và bạn thậm chí không phải tương tác với AWS CLI hoặc Bảng điều khiển? Mọi thứ được thúc đẩy bởi quá trình đăng ký kiểm soát nguồn.\nBây giờ bạn đã sẵn sàng tích hợp các API này với website TravelBuddy.\n"},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/5-tracing-application-performance-with-xray/","title":"Theo dõi Hiệu năng Ứng dụng với AWS X-Ray","tags":[],"description":"","content":"Theo dõi Hiệu năng Ứng dụng với AWS X-Ray Mỗi hàm Lambda TripSearch, HotelSpecials và FlightSpecials chứa các phụ thuộc cần thiết để hỗ trợ phát ra các sự kiện theo dõi tới AWS X-ray, để cho phép bạn dễ dàng theo dõi các cuộc gọi giữa các thành phần của hệ thống phân tán của bạn. Trong bài thực hành này, bạn sẽ bật tính năng và xem lại AWS X-Ray console.\nTruy cập AWS Lambda console. Click Functions. Nhập idevelopTripSearchFull vào ô tìm kiếm và nhấn Enter. Click idevelopTripSearchFull. Click Configuration Click Monitoring and operations tools Click Edit Tại phần AWS X-Ray, kích hoạt Active tracing Click Save Truy cập trang TravelBuddy SPA. Đăng nhập nếu chưa đăng nhập Click Go! mà không nhập thành phố để kích hoạt hàm Lambda idevelopTripSearchFull. Sẽ mất một vài giây để hoàn thành. Chúng ta sẽ thấy hộp thoại hiển thị các bản ghi. Truy cập AWS CloudWatch Console. Mở phần X-Ray traces. Click Service map Mở phần Legend and options Click Metrics Click Service map, bạn sẽ thấy Service map. Truy cập AWS Lambda console. Click Functions. Nhập idevelopTripSearchFull vào ô tìm kiếm và nhấn Enter. Click idevelopTripSearchFull. Click Monitor Click Traces Bây giờ, đã có thể xem Service map trực tiếp từ Lambda console. Quay lại AWS CloudWatch Console. Click Service map Click Client Click View traces Trong bảng Traces Click ID của đối tượng đầu tiên hiển thị Bạn sẽ có thể thấy được timeline của nhiều hành động và thời gian thực thi chúng Tại đây, bạn có thể thấy rằng việc gọi đến đã diễn ra trong 5,98 giây và 1.67 giây cho việc scan trong bảng TravelBuddyTripSectors DynamoDB\nBật tính năng theo dõi chủ động trên các hàm Lambda khác đã được tạo như một phần của bài thực hành này: idevelopTripSearchFull, idevelopTripSearchFromCity, idevelopTripSearchToCity và GetHotelSpecials. Bạn có thể thực hiện việc này theo cách thủ công bằng console. Tuy nhiên, lưu ý rằng hàm được tạo thông qua tự động hóa có tên bắt đầu bằng awscodestar sẽ bị ghi đè cấu hình nếu bạn triển khai lại mã.\n"},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/3-create-single-page-app/3.5-setup-single-page-app-website/","title":"Thiết lập trang SPA ","tags":[],"description":"","content":"Thiết lập trang SPA iDevelop - Flight Specials API iDevelop - Hotel Specials API iDevelop - Trip Search API\nset AWS_PROFILE=devaxacademy aws s3 sync . s3://devax-06-s3bucketwebsite18ddbcd4-7ud5y2jvep25 --acl public-read java -jar target\\TripSearch-1.0-SNAPSHOT.jar Bây giờ chúng ta đã thiết lập ba API, chúng ta đã sẵn sàng gọi chúng từ trang web. Trước tiên, chúng ta cần thiết lập ứng dụng web đơn trang (SPA) và host nó trên Amazon S3.\nChúng ta đã quyết định sử dụng AngularJS framework cho SPA của mình. Tất nhiên bạn có thể sử dụng bất kỳ framework nào mà bạn cảm thấy phù hợp. Mục đích của bài thực hành này không phải để dạy bạn AngularJS hoặc bất kỳ framework SPA nào khác, vì vậy chúng ta sẽ không đi sâu vào chi tiết về cách hoạt động của trang, ngoài việc hướng dẫn bạn cách kết nối các lệnh gọi API mà SPA sẽ cần thực hiện để điền các phần tử dữ liệu của nó.\nSPA Project www.zip (5660 KB) Tải file www.zip và giải nén Tạo client SDK cho từng API trong số ba API và triển khai tới SPA Việc triển khai SPA mà bạn được cung cấp đã triển khai sơ bộ ba API mà chúng ta muốn cung cấp cho người dùng của mình. Họ có triển khai vừa đủ để không gây ra lỗi trên trang khi được thực thi, nhưng họ không cung cấp bất kỳ dữ liệu nào. Để ‘kết nối’ các API của chúng ta với SPA, chúng ta sẽ cần tạo các Javascript client SDK có liên quan đến các API này và lưu trữ chúng trong đường dẫn thích hợp.\nTruy cập AWS API Gateway console Nhập iDevelop - Flight Specials API vào ô tìm kiếm và nhấn Enter Click iDevelop - Flight Specials API Click Stages Chọn prod Click tab SDK Generation Tại mục Platform, chọn Javascript Click Generate SDK. Javascript SDK cho API sẽ được tải về từ trình duyệt của bạn. Giải nén tệp tin tải về trong bước 3 Tìm file apigClient.js trong thư mục vừa giải nén và đổi tên thành apigClient_FlightSpecials.js Mở file apigClient_FlightSpecials.js trong Eclipse IDE. Dùng Search/Replace và thay hết các nội dung apigClientFactory bằng apigClientFactory_FlightSpecials. Sẽ có 2 lần xuất hiện để thay thế, cả hai lần xuất hiện ở đầu tập tin. Nhấn tổ hợp phím Ctrl+F Tại mục Find, điền apigClientFactory Tại mục Replace with, điền apigClientFactory_FlightSpecials Click Replace All để thay thế Lưu lại Sao chép tập tin apigClient_FlightSpecials.js sang thư mục api trong thư mục www của ứng dụng đơn trang trong môi trường làm việc của bạn. Thay thế tệp tin apigClient_FlightSpecials.js trong thư mục api Với iDevelop - Hotel Specials API làm tương tự như iDevelop - Flight Specials API Truy cập AWS API Gateway console Nhập iDevelop - Hotel Specials API vào ô tìm kiếm và nhấn Enter Click iDevelop - Hotel Specials API Click Stages Chọn prod Click tab SDK Generation Tại mục Platform, chọn Javascript Click Generate SDK. Javascript SDK cho API sẽ được tải về từ trình duyệt của bạn. Giải nén tệp tin tải về trong bước 8 Tìm file apigClient.js trong thư mục vừa giải nén và đổi tên thành apigClient_HotelSpecials.js Mở file apigClient_HotelSpecials.js trong Eclipse IDE. Dùng Search/Replace và thay hết các nội dung apigClientFactory bằng apigClientFactory_HotelSpecials. Nhấn tổ hợp phím Ctrl+F Tại mục Find, điền apigClientFactory Tại mục Replace with, điền apigClientFactory_HotelSpecials Click Replace All để thay thế Lưu lại Sao chép tập tin apigClient_HotelSpecials.js sang thư mục api trong thư mục www của ứng dụng đơn trang trong môi trường làm việc của bạn. Thay thế tệp tin apigClient_HotelSpecials.js trong thư mục api Với iDevelop - Trip Search API làm tương tự như iDevelop - Flight Specials API Truy cập AWS API Gateway console Nhập iDevelop - Trip Search API vào ô tìm kiếm và nhấn Enter Click iDevelop - Trip Search API Click Stages Chọn prod Click tab SDK Generation Tại mục Platform, chọn Javascript Click Generate SDK. Javascript SDK cho API sẽ được tải về từ trình duyệt của bạn. Giải nén tệp tin tải về trong bước 13 Tìm file apigClient.js trong thư mục vừa giải nén và đổi tên thành apigClient_TripSearch.js Mở file apigClient_TripSearch.js trong Eclipse IDE. Dùng Search/Replace và thay hết các nội dung apigClientFactory bằng apigClientFactory_TripSearch. Nhấn tổ hợp phím Ctrl+F Tại mục Find, điền apigClientFactory Tại mục Replace with, điền apigClientFactory_TripSearch Click Replace All để thay thế Lưu lại Sao chép tập tin apigClient_TripSearch.js sang thư mục api trong thư mục www của ứng dụng đơn trang trong môi trường làm việc của bạn. Thay thế tệp tin apigClient_TripSearch.js trong thư mục api Đẩy các tập tin SPA lên Amazon S3 Với các API SDK đã có, giờ đây bạn đã sẵn sàng triển khai mã nguồn SPA lên Amazon S3 Bucket đê trang web hoạt động. Quá trình thiết lập bài thực hành đã cung cấp một S3 bucket phù hợp, đã được kích hoạt WebSite Hosting. Vì vậy, bạn sẽ chỉ cần đẩy tất cả các tập tin từ máy của bạn sang S3 bucket để có thể kiểm tra ứng dụng.\nMở Command Prompt , chuyển đường dẫn tới project www đã giải nén trong bước 1 Chạy câu lệnh dưới đây để đồng bộ hóa giữa máy cục bộ của bạn và S3 bucket set AWS_PROFILE=devaxacademy aws s3 sync . s3://\u0026lt;S3BucketWWWBucketName\u0026gt; --acl public-read Thay \u0026lt;S3BucketWWWBucketName\u0026gt; bằng giá trị S3BucketWWWBucketName trong tab Output của stack DevAx-06\n18. Khi quá trình đồng bộ hóa hoàn tất, bạn đã sẵn sàng để kiểm tra SPA của mình được lưu trữ trên S3. Mở URL sau trong trình duyệt web\nhttp://\u0026lt;S3BucketWWWBucketName\u0026gt;.s3-website-\u0026lt;YOUR_REGION\u0026gt;.amazonaws.com Thay \u0026lt;S3BucketWWWBucketName\u0026gt; bằng giá trị S3BucketWWWBucketName trong tab Output của stack DevAx-06\nThay \u0026lt;YOUR_REGION\u0026gt; bằng Region của bạn\nTrang web TravelBuddy quen thuộc sẽ hiển thị trong trình duyệt của bạn. Trước đây, bạn đã từng thấy trang web này khi nó là một ứng dụng Java monolithic được cài đặt lên EC2 do Elastic Beanstalk quản lý. Nhưng bây giờ, trang web là một ứng dụng web một trang và được lưu trữ trong S3 bucket thực hiện các lệnh gọi API đến Amazon API Gateway để cung cấp dữ liệu cho trang web.\nBạn sẽ thấy danh sách Hotel Specials và Flight Specials được hiển thị trên trang.\nNgoài ra, tùy chọn Find trips to… có sẵn. Để kiểm tra điều này, hãy nhập Melbourne vào ô Find trips to\u0026hellip; và nhấp vào nút Go!. Một hộp thoại sẽ xuất hiện hiển thị kết quả tìm kiếm. Dữ liệu này đang được cung cấp từ việc gọi đến TripSearchAPI, ở đường dẫn /tripstocity.\nNếu bạn xóa giá trị trong trường và nhấp vào nút Go!, bạn sẽ thấy danh sách tất cả các chuyến đi có sẵn, được phục vụ từ lệnh gọi TripSearchAPI đến /trips.\nNếu bạn không thấy dữ liệu là kết quả của các lệnh gọi API, hãy xem developer console trong trình duyệt để xem liệu có bất kỳ lỗi nào giúp tìm ra sự cố hay không.\n"},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/6-challenge/","title":"Bài tập nâng cao ","tags":[],"description":"","content":"Bài tập nâng cao Là một nhiệm vụ tùy chọn, bạn được thử thách với việc triển khai theo dõi chủ động bằng cách sử dụng tự động hóa cho các chức năng được triển khai bằng AWS CLI và CodeStar. Chúng tôi sẽ không cung cấp cho bạn tất cả các câu trả lời! Nhưng để giúp bạn trong hành trình của mình, hãy xem AWS::Lambda::Function tài liệu CloudFormation, và tài liệu AWS SAM.\nKhi bạn đã triển khai đầy đủ theo dõi các hàm Lambda, bạn sẽ thấy các phân đoạn theo dõi trên AWS X-ray console. Kích hoạt thực thi các hàm lambda khác nhau bằng cách sử dụng trang web TravelBuddy SPA và bạn sẽ thấy các kết quả như:\n"},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/3-create-single-page-app/3.6-build-api-consumer/","title":"Tạo một Client để sử dụng API","tags":[],"description":"","content":"Tạo một Client để sử dụng API java -jar target/TripSearch-sdkClient-1.0-SNAPSHOT.jar Bây giờ bạn có một mô hình hoạt động của trang web đang chạy như một SPA gọi dữ liệu thông qua RESTful API được lưu trữ trên AWS Lambda và cung cấp từ Amazon API Gateway. Các nguồn cấp dữ liệu này được coi là công khai vì người dùng không cần đăng nhập và cung cấp thông tin đăng nhập cho lệnh gọi tới API. Trong bài tập này, bạn sẽ xem xét cách bạn có thể yêu cầu xác thực để thực hiện lệnh gọi API và việc sử dụng Khóa API để thực thi điều chỉnh tốc độ cuộc gọi và quản lý hạn ngạch. Để chứng minh, bạn sẽ sử dụng một ứng dụng Java client, để chỉ ra cách bạn có thể sử dụng các Java SDK được tạo tự động trong các ứng dụng của bạn.\nTạo Response Model cho TripSearch API Để trình tạo SDK có thể tạo các lớp thích hợp cho một ngôn ngữ mạnh như Java (đối lập với Javascript), chúng ta cần cho API Gateway biết hình dạng hoặc schema của các đối tượng yêu cầu/phản hồi trông như thế nào. Trong TripSearch API, bạn đang sử dụng phương thức GET cho mỗi lệnh gọi API. Do đó, không có schema nào cho các yêu cầu gửi đến vì tham số city được truyền như một phần của URL. Thay vào đó, nếu bạn thay đổi phương thức thành POST, bạn sẽ cần truyền tham số thành phố trong tải trọng body và sẽ cần tạo một mô hình cho schema đối tượng này cho trình tạo mã để tạo một lớp Java để bạn sử dụng.\nDữ liệu kết quả từ các lệnh gọi API được trả về trong body của phản hồi. Để trình tạo mã có thể tạo một lớp thích hợp để đại diện cho phản hồi này, chúng ta cần tạo một mô hình phản hồi và đặt nó làm mô hình phản hồi phương thức.\nTruy cập AWS API Gateway console Nhập iDevelop - Trip Search API vào ô tìm kiếm và nhấn Enter Click iDevelop - Trip Search API Click Models Click Create Tại mục Model name nhập TripsFromCityResponse Tại mục Content-type nhập application/json Tại mục Model schema nhập { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;succeeded\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;boolean\u0026#34; }, \u0026#34;errorMessage\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;errorType\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;number\u0026#34; }, \u0026#34;data\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;items\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;date\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;number\u0026#34; }, \u0026#34;originCity\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;destinationCity\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;airline\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } } } } }, \u0026#34;title\u0026#34;: \u0026#34;TripsFromCityResponse\u0026#34; } Click Create model Gán TripsFromCityResponse model cho API /tripsfromcity Click Resources Chọn GET trong /tripsfromcity/{city} Click Method Response Trong bảng /tripsfromcity/{city} - GET - Method Response chọn icon tam giác cạnh HTTP Status Ở mục Response Body for 200 click biểu tượng bút chì kế bên Empty model. Trường sẽ trở thành một danh sách thả xuống. Chọn TripsFromCityResponse Click vào dấu tích màu xám Click Actions Click Deploy API Tại mục Deployment stage, chọn prod Click Deploy Trong mục prod Stage Editor xuất hiện, click SDK Generation Tại mục Platform, chọn Java SDK Tại mục Service name, nhập TripSearch Tại mục Java package name, nhập idevelop.api.sdk Click Generate SDK. Java SDK sẽ được tạo và tải xuống dưới dạng tệp ZIP. Giải nén tệp ZIP đã tải xuống trong bước 8 Mở Command Prompt và chuyển đường dẫn đến mã nguồn vừa giải nén (thư mục được gọi là generated-code) Chạy lệnh dưới đây mvn install Việc này sẽ biên dịch và cài đặt SDK trong kho lưu trữ Maven cục bộ của bạn và chúng tôi sẽ đề cập đến nó trong các bước tiếp theo.\nTạo một ứng dụng client Java sử dụng API TripSearchJavaClient Project TripSearchJavaClient.zip (8 KB) Tải file TripSearchJavaClient.zip và giải nén Trong Eclipse IDE, mở froject đã giải nén trong bước 10 Mở file pom.xml Thay nội dung file pom.xml bằng nội dung dưới đây \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;idevelop.api.tripsearch.sdk.app\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;TripSearch-sdkClient\u0026lt;/artifactId\u0026gt; \u0026lt;packaging\u0026gt;jar\u0026lt;/packaging\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;TripSearch-sdkClient\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://maven.apache.org\u0026lt;/url\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;1.8\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;1.8\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;junit\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.8.1\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;idevelop.api.sdk\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;TripSearch\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;compile\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-shade-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.2.4\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;shade\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;transformers\u0026gt; \u0026lt;transformer implementation=\u0026#34;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\u0026#34;\u0026gt; \u0026lt;mainClass\u0026gt;idevelop.api.tripsearch.sdk.app.App\u0026lt;/mainClass\u0026gt; \u0026lt;/transformer\u0026gt; \u0026lt;/transformers\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; 12. Trong Command Prompt, chuyển đường dẫn đến mã nguồn giải nén trong bước 10\nChạy lệnh dưới đây mvn package 13. Chạy câu lệnh dưới đây để chạy project\njava -jar target/TripSearch-sdkClient-1.0-SNAPSHOT.jar Chúng ta sẽ thấy được kết quả. API consumer sẽ tính thời gian mỗi lần gọi tới API mất bao lâu và hiển thị kết quả. Nó sẽ thực hiện tối đa 100 lần gọi nhanh nhất có thể.\nNếu chúng ta có nhiều người dùng sử dụng API liên tục. Chúng ta có thể vượt quá cơ sở hạ tầng được cung cấp, vì vậy chúng ta cần một vài cách để điều tiết các lần gọi API. Chúng ta có thể sử dụng Usage Plans để làm việc này.\nTruy cập AWS API Gateway console Nhập iDevelop - Trip Search API vào ô tìm kiếm và nhấn Enter Click iDevelop - Trip Search API Click Usage Plans Click Create Tại mục Name, nhập LabPlan Tại mục Rate, nhập 1 Tại mục Burst, nhập 1 Tại mục Quota, điền 1000 mỗi tháng Click Next Click Add API Stage Trong danh sách API, chọn iDevelop - Trip Search API Trong danh sách Stage, chọn prod Click dấu tích màu xám Click Next CLick Create API Key and add to Usage Plan Trong hộp thoại xuất hiện, tại mục Name điển SDKClient Click Save Click Done, một API key được tạo và được liên kết với Usage Plan Click iDevelop - Trip Search API Chọn GET trong /tripsfromcity/{city} Click Method Request Tại mục API Key Required, click biểu tượng bút chì Chọn True Click dấu tích màu nâu để xác nhận Click Actions Click Deploy API Trong hộp thoại hiện lên: Tại mục Deployment stage, chọn prod Click Deploy Trong mục prod Stage Editor xuất hiện, click SDK Generation Tại mục Platform, chọn Java SDK Tại mục Service name, nhập TripSearch Tại mục Java package name, nhập idevelop.api.sdk Click Generate SDK. Java SDK sẽ được tạo và tải xuống dưới dạng tệp ZIP. Giải nén tệp ZIP đã tải xuống trong bước 26 Mở Command Prompt và chuyển đường dẫn đến mã nguồn vừa giải nén (thư mục được gọi là generated-code) Chạy lệnh dưới đây mvn install Việc này sẽ biên dịch và cài đặt SDK trong kho lưu trữ Maven cục bộ của bạn và ghi đè lên phiên bản trước.\nKiểm thử SDK vừa tạo mới với Ứng dụng Client Java Chạy câu lệnh dưới đây để chạy ứng dụng java -jar target/TripSearch-sdkClient-1.0-SNAPSHOT.jar Vì chúng ta đã cài đặt /tripsfromcity/{GET} endpoint yêu cầu API Key, nhưng chúng ta chưa cài đặt API trong client application. Bạn sẽ thấy lỗi Forbidden. Thiết lập API key trong mã nguồn Client và chạy lại Ứng dụng sử dụng API với tính năng throttling Click API Keys Click SDKClient Tại mục API Key, click show để hiện ra auto-generated API key Lưu lại API key tại mục API key Trong Eclipse IDE, mở file có đường dẫn /src/main/java/idevelop/api/tripsearch/sdk/app/App.java Thay \u0026lt;REPLACE_WITH_API_KEY\u0026gt; bằng API key đã lưu trong bước 30 Bỏ comment tại dòng apiKey(API_KEY). Bây giờ bạn đã có API Key trong lệnh gọi API Gateway, SDK được tạo cho bạn sẽ chứa lệnh gọi cho phép thiết lập khóa. Nếu bạn không có API Key, trình tạo mã không sử dụng hàm này, do vậy trong mã nguồn được cung cấp nó bị comment lại. Bạn cần bỏ comment trong mã nguồn được cung cấp để cho phép API Key được đặt chính xác. Lưu lại file Trong Eclipse IDE, nhấp chuột phải vào project TripSearch-sdkClient Click Maven Click Update Project\u0026hellip; Trong Command Prompt, chạy lệnh dưới đây mvn package 34. Trong Command Prompt, chạy lệnh dưới đây\njava -jar target/TripSearch-sdkClient-1.0-SNAPSHOT.jar 35. Bạn sẽ thấy kết quả 36. Hãy thử thay đổi API_KEY chúng ta đã đặt vào App class trong bước 31. Chúng ta có thể thêm dấu . vào cuối của chuỗi API_KEY 37. Trong Command Prompt, chạy lệnh dưới đây\njava -jar target/TripSearch-sdkClient-1.0-SNAPSHOT.jar Chúng ta sẽ thấy kết quả Hãy thử nghiệm với Rate và Burst trong Usage Plan để xem chúng có ảnh hưởng như thế nào đến ứng dụng khách gọi API. Bạn không cần triển khai lại API cũng như không tạo lại SDK nếu bạn thay đổi cài đặt trong Usage Plan.\n"},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/7-cleanup/","title":"Dọn dẹp tài nguyên","tags":[],"description":"","content":"Bạn sẽ dọn dẹp tài nguyên theo thứ tự sau:\nTerminate EC2 Instance Truy cập Amazon EC2 console. Trên thanh điều hướng bên trái, click Intances. Chọn DevAxWindowsHost. Click Instance state Click Terminate instance Click Terminate Xóa Users Truy cập vào AWS IAM Console. Click Users. Nhập awsstudent vào ô tìm kiếm Chọn awsstudent. Click Delete Điền awsstudent để xác nhận, sau đó click Delete Xóa policy Truy cập vào AWS IAM Console. Click Policies. Nhập idevelop vào ô tìm kiếm và nhấn Enter Chọn idevelopCodeStarCloudFormationPolicy Click Actions Click Delete Điền tên của policy để xác nhận, sau đó click Delete để xóa Xóa DynamoDB Truy cập AWS DynamoDB Console. Click Tables Chọn tất cả DynamoDB đã tạo trong bài lab Click Delete Điền delete để xác nhận, sau đó click Delete tables để xóa Xóa API Gateway Truy cập AWS API Gateway console. Chọn iDevelop - Trip Search API Click Actions Click Delete Click Delete để xóa Xóa CodeStar Truy cập AWS CodeStar Console. Click Projects Chọn FlightSpecialsAPI Click Delete Điền delete để xác nhận, sau đó click Delete để xóa Xóa CloudFormation Stack Truy cập AWS CloudFormation Console. Chọn DevAx-06. Click Delete Click Delete stack Làm tương tự với những CloudFormation Stack còn lại Xóa S3 bucket Truy cập vào AWS S3 Console. Click Buckets Chọn aws-codestart-us-east-1\u0026hellip;. Click Empty. Điền permanently delete để xác nhận, sau đó click Empty để xóa toàn bộ dữ liệu trong S3 bucket. Click Exit để trở lại giao diện S3. Click Delete. Điền tên bucket sau đó click Delete bucket để xóa S3 bucket. Làm tương tự cho S3 bucket còn lại "},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://hotloncon1.github.io/aws-lab000055/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]